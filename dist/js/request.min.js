/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/modules/classes/consultForm.js":
/*!***********************************************!*\
  !*** ./src/js/modules/classes/consultForm.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ConsultForm\": () => (/* binding */ ConsultForm)\n/* harmony export */ });\nclass ConsultForm {\n    errors = {\n        0: 'Заполните все обязательные поля',\n        1: 'Укажите корректное ФИО',\n        2: 'Укажите корректный телефон',\n        3: 'Укажите корректный email',\n    }\n\n    constructor(formWrapper) {\n        this.formWrapper = formWrapper\n        this.form = formWrapper.querySelector('.form-form')\n        this.incorrect = formWrapper.querySelector('.form__incorrect')\n        this.timeOut = null\n        this.button = formWrapper.querySelector('.button-submit')\n\n        this.fields =\n            Array.from(formWrapper.querySelectorAll('input'))\n                .concat(...formWrapper.querySelectorAll('textarea'))\n\n        this.initValidators()\n        this.formatPhone(this.fields.find(e => e.name === 'phone'))\n    }\n\n    initValidators() {\n        this.button.addEventListener('click', e => {\n            e.preventDefault()\n            this.button.blur()\n\n            const errorsSet = new Set()\n            const wrongFileds = []\n            const formValues = {}\n\n            for (let i = 0; i < this.fields.length; ++i) {\n                const field = this.fields[i];\n\n                formValues[field.name] = field.value\n\n                switch (field.name) {\n                    case 'name':\n                        if (field.value.split(' ').length < 2) {\n                            errorsSet.add(this.errors[1])\n                            wrongFileds.push(field)\n                        }\n                        break;\n\n                    case 'phone':\n                        if (!/^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/.test(field.value)) {\n                            errorsSet.add(this.errors[2])\n                            wrongFileds.push(field)\n                        }\n\n                        formValues[field.name] = field.value.replace(/[^\\d]/g, '')\n                        break\n\n                    case 'mail':\n                        if (!/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/.test(field.value)) {\n                            errorsSet.add(this.errors[3])\n                            wrongFileds.push(field)\n                        }\n                        break\n\n                    case 'message':\n                        if (!field.value) {\n                            errorsSet.add(this.errors[0])\n                            wrongFileds.push(field)\n                        }\n                        break\n\n                    default:\n                        break;\n                }\n            }\n\n            if (errorsSet.size > 0) {\n                this.showError(errorsSet, wrongFileds)\n            } else {\n                console.log(formValues)\n            }\n        });\n\n        this.fields.forEach(field => field.addEventListener('click', () => field.classList.remove('wrong')))\n    }\n\n    formatPhone(field) {\n        field.addEventListener('keyup', e => {\n\n            if (e.keyCode === 8 || e.keyCode === 46) {\n                return\n            }\n\n            let result = '+7 ('\n\n            if (!field.value) {\n                field.value = result\n                return\n            }\n\n            let formattedPhone = field.value.replace(/[^\\d]/g, '')\n            let start = 0\n            if (formattedPhone[0] === '8' || formattedPhone[0] === '7')\n                start = 1\n\n            if (formattedPhone.length >= start + 3) {\n                result += `${formattedPhone.slice(start, start + 3)}) `\n            } else {\n                result += formattedPhone.slice(start)\n            }\n\n            if (formattedPhone.length >= start + 6) {\n                result += `${formattedPhone.slice(start + 3, start + 6)}-`\n            } else {\n                result += formattedPhone.slice(start + 3, start + 6)\n            }\n\n            if (formattedPhone.length >= start + 8) {\n                result += `${formattedPhone.slice(start + 6, start + 8)}-`\n            } else {\n                result += formattedPhone.slice(start + 6, start + 8)\n            }\n\n            if (formattedPhone.length >= start + 8) {\n                result += formattedPhone.slice(start + 8, start + 10)\n            }\n\n            field.value = result\n        })\n    }\n\n    showError(errors, fields) {\n        if (this.timeOut)\n            clearTimeout(this.timeOut)\n\n        this.incorrect.innerHTML = ''\n\n        errors.forEach(e => {\n            const errorElement = document.createElement('div')\n            errorElement.innerHTML = e\n            this.incorrect.appendChild(errorElement)\n        })\n\n        this.incorrect.classList.add('visible')\n        fields.forEach(field => field.classList.add('wrong'));\n\n        this.timeOut = setTimeout(() => {\n            this.incorrect.classList.remove('visible')\n            this.incorrect.innerHtml = ''\n        }, 5000);\n    }\n}\n\n//# sourceURL=webpack://testing-starting/./src/js/modules/classes/consultForm.js?");

/***/ }),

/***/ "./src/js/request.js":
/*!***************************!*\
  !*** ./src/js/request.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_classes_consultForm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/classes/consultForm.js */ \"./src/js/modules/classes/consultForm.js\");\n\n\nconst consultForm = new _modules_classes_consultForm_js__WEBPACK_IMPORTED_MODULE_0__.ConsultForm(document.querySelector('.consult-form-wrap'))\n\n//# sourceURL=webpack://testing-starting/./src/js/request.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/request.js");
/******/ 	
/******/ })()
;